import tkinter as tk
from tkinter import messagebox
#login screen
class LoginScreen:
    def __init__(self, master):
        self.master = master
        self.master.title("Baker's Movie Rentals - Login")
        #username
        self.label_username = tk.Label(master, text="Username:")
        self.label_username.pack()
        self.entry_username = tk.Entry(master)
        self.entry_username.pack()
        #password
        self.label_password = tk.Label(master, text="Password:")
        self.label_password.pack()
        self.entry_password = tk.Entry(master, show="*")
        self.entry_password.pack()
        #enter
        self.button_login = tk.Button(master, text="Login", command=self.login)
        self.button_login.pack()
    
    def login(self):
        username = self.entry_username.get()
        password = self.entry_password.get()
        #actual username and password
        if username == "Admin" and password == "Password123":
            self.master.withdraw()
            inventory_window = tk.Toplevel(self.master)
            inventory_app = InventoryManagement(inventory_window)
            #invalid username and password
        else:
            messagebox.showerror("Error", "Invalid username or password")
#list page
class InventoryManagement:
    def __init__(self, master):
        self.master = master
        self.master.title("Baker's Movie Rentals - Inventory Management")
        #movie list box
        self.movie_list = []  
        
        self.label_inventory = tk.Label(master, text="Inventory Management")
        self.label_inventory.pack()
        
        self.listbox_movies = tk.Listbox(master, height=10, width=50)
        self.listbox_movies.pack()
        #all the buttons
        self.button_add_movie = tk.Button(master, text="Add Movie", command=self.add_movie)
        self.button_add_movie.pack()
        
        self.button_delete_movie = tk.Button(master, text="Delete Movie", command=self.delete_movie)
        self.button_delete_movie.pack()
        
        self.button_save = tk.Button(master, text="Save", command=self.save)
        self.button_save.pack()
        
        self.button_exit = tk.Button(master, text="Exit", command=self.confirm_exit)
        self.button_exit.pack()
    #define add movie button
    def add_movie(self):
        add_movie_window = tk.Toplevel(self.master)
        add_movie_window.title("Add Movie")
        #add movie window with requirements
        label_name = tk.Label(add_movie_window, text="Movie Name:")
        label_name.grid(row=0, column=0)
        entry_name = tk.Entry(add_movie_window)
        entry_name.grid(row=0, column=1)
        
        label_rating = tk.Label(add_movie_window, text="Rating:")
        label_rating.grid(row=1, column=0)
        entry_rating = tk.Entry(add_movie_window)
        entry_rating.grid(row=1, column=1)
        
        label_genre = tk.Label(add_movie_window, text="Genre:")
        label_genre.grid(row=2, column=0)
        entry_genre = tk.Entry(add_movie_window)
        entry_genre.grid(row=2, column=1)
        
        button_add = tk.Button(add_movie_window, text="Add", command=lambda: self.add_movie_to_list(entry_name.get(), entry_rating.get(), entry_genre.get(), add_movie_window))
        button_add.grid(row=3, columnspan=2)
    #check what was entered and add it to the movie list
    def add_movie_to_list(self, name, rating, genre, add_movie_window):
        if name and rating and genre:
            movie_info = f"Name: {name}, Rating: {rating}, Genre: {genre}"
            self.movie_list.append(movie_info)
            self.update_movie_listbox()
            add_movie_window.destroy()
        else:
            messagebox.showerror("Error", "Please fill out all fields")

    def update_movie_listbox(self):
        self.listbox_movies.delete(0, tk.END)
        for movie in self.movie_list:
            self.listbox_movies.insert(tk.END, movie)
    #allows to select movie and delete
    def delete_movie(self):
        selected_index = self.listbox_movies.curselection()
        if selected_index:
            movie_index = selected_index[0]
            del self.movie_list[movie_index]
            self.update_movie_listbox()
        else:
            messagebox.showerror("Error", "Please select a movie to delete")
    
    def save(self):
        pass
    #exit confirmation
    def confirm_exit(self):
        response = messagebox.askyesno("Exit", "Are you sure you want to exit?")
        if response:
            self.master.destroy()
            login_window = tk.Toplevel(self.master)
            login_app = LoginScreen(login_window)

def main():
    root = tk.Tk()
    app = LoginScreen(root)
    root.mainloop()

if __name__ == "__main__":
    main()
